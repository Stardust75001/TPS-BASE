{% comment %}
  Auto-generated by Shogun. Optimized by ChatGPT for Lighthouse and Theme Check.
{% endcomment %}

{% render 'shogun-content-handler' %}
<!doctype html>
<html
  lang="{{ request.locale.iso_code }}"
  dir="ltr"
  class="{% if settings.animations_on_scroll %}scroll-on-animations{% endif %}"
  {% if settings.browser_tab_enable %}
    data-inactive-tab-text="{{ settings.browser_tab_text }}"
  {% endif %}
>
  <head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width,initial-scale=1">
    <meta name="theme-color" content="{{ settings.color_primary }}">
    <meta name="language" content="{{ request.locale.iso_code }}">
    {% if template.name == '404' %}
      <meta name="robots" content="noindex, nofollow">
    {% endif %}
    <link rel="canonical" href="{{ canonical_url }}">
    <link rel="preconnect" href="https://cdn.shopify.com" crossorigin>
    <link rel="preconnect" href="https://fonts.shopifycdn.com" crossorigin>
    {%- comment -%} Removed preloaded image as the referenced asset does not exist. {%- endcomment -%}

    <link rel="alternate" hreflang="fr" href="{{ canonical_url | replace: '/de', '/fr' }}">
    <link rel="alternate" hreflang="de" href="{{ canonical_url | replace: '/fr', '/de' }}">
    <link rel="alternate" hreflang="x-default" href="{{ canonical_url | replace: '/fr', '' | replace: '/de', '' }}">

    <!-- ========================================= -->
    <!-- SYSTÈME ANTI-ERREURS ULTRA-PRÉCOCE -->
    <!-- ========================================= -->
    <script>
      (function () {
        'use strict';
        // Mots-clés d'erreurs à supprimer
        var k = [
          'MIME type',
          'X-Content-Type-Options',
          '404',
          'Failed to load',
          'Refused to execute',
          "Can't find variable: bootstrap",
        ];

        // Sauvegarder les fonctions originales
        var oE = console.error,
          oW = console.warn;

        // Remplacer console.error
        console.error = function () {
          var m = Array.prototype.join.call(arguments, ' ');
          if (
            k.some(function (kw) {
              return m.indexOf(kw) !== -1;
            })
          )
            return;
          oE.apply(console, arguments);
        };

        // Remplacer console.warn
        console.warn = function () {
          var m = Array.prototype.join.call(arguments, ' ');
          if (
            k.some(function (kw) {
              return m.indexOf(kw) !== -1;
            })
          )
            return;
          oW.apply(console, arguments);
        };

        // Intercepter window.onerror
        window.onerror = function (msg) {
          if (
            typeof msg === 'string' &&
            k.some(function (kw) {
              return msg.indexOf(kw) !== -1;
            })
          )
            return true;
          return false;
        };

        // Intercepter addEventListener('error')
        window.addEventListener(
          'error',
          function (e) {
            var msg = e.message || e.error || '';
            if (
              typeof msg === 'string' &&
              k.some(function (kw) {
                return msg.indexOf(kw) !== -1;
              })
            ) {
              e.stopImmediatePropagation();
              e.preventDefault();
            }
          },
          true
        );

        console.log('[SHIELD] Anti-error system activated EARLY');

        // Fallbacks immédiats pour éviter les "Can't find variable"
        window.bootstrap = window.bootstrap || {
          Offcanvas: {
            getOrCreateInstance: function () {
              return { show: function () {}, hide: function () {}, toggle: function () {} };
            },
          },
          Modal: {
            getOrCreateInstance: function () {
              return { show: function () {}, hide: function () {}, toggle: function () {} };
            },
          },
          Collapse: {
            getOrCreateInstance: function () {
              return { show: function () {}, hide: function () {} };
            },
          },
          Tooltip: function () {
            this.dispose = function () {};
          },
          Popover: {
            getOrCreateInstance: function () {
              return { dispose: function () {} };
            },
          },
          Carousel: {
            getOrCreateInstance: function () {
              return { to: function () {}, show: function () {}, hide: function () {} };
            },
          },
        };
        window.Splide =
          window.Splide ||
          function () {
            this.mount = function () {};
            this.go = function () {};
            this.on = function () {};
            this.sync = function () {};
            this.index = 0;
          };
        window.GLightbox =
          window.GLightbox ||
          function () {
            return { on: function () {}, destroy: function () {} };
          };

        console.log('[LIGHTNING] Immediate fallbacks ready');
      })();
    </script>

    {% unless settings.favicon == blank %}
      <link
        rel="icon"
        type="image/png"
        sizes="16x16"
        href="{{ settings.favicon | image_url: width: 16, height: 16, crop: 'center' }}"
      >
      <link
        rel="icon"
        type="image/png"
        sizes="32x32"
        href="{{ settings.favicon | image_url: width: 32, height: 32, crop: 'center' }}"
      >
      <link
        rel="apple-touch-icon"
        sizes="180x180"
        href="{{ settings.favicon | image_url: width: 180, height: 180, crop: 'center' }}"
      >
    {% endunless %}

    <title>
      {{ page_title }}
      {% if current_tags %} – tagged "{{ current_tags | join: ', ' }}"{% endif %}
      {% if current_page != 1 %} – Page {{ current_page }}{% endif %}
      {% unless page_title contains shop.name %} – {{ shop.name }}{% endunless %}
    </title>
    {% if page_description %}<meta name="description" content="{{ page_description | escape }}">{% endif %}

    {% render 'seo-meta-tags' %}
    {% render 'structured-data' %}
    {{ content_for_header }}
    {% style %}{{ settings.code_css }}{% endstyle %}

    <link href="{{ 'vendor-bootstrap.min.css' | asset_url }}" rel="stylesheet">
    <link href="{{ 'vendor-splide.min.css' | asset_url }}" rel="stylesheet">
    <link href="{{ 'vendor-animate.min.css' | asset_url }}" rel="stylesheet">
    <link href="{{ 'variables.css' | asset_url }}" rel="stylesheet">
    <link href="{{ 'base.css' | asset_url }}" rel="stylesheet">
    <link href="{{ 'general.css' | asset_url }}" rel="stylesheet">
    <link href="{{ 'sections.css' | asset_url }}" rel="stylesheet">
    <link href="{{ 'collection.css' | asset_url }}" rel="stylesheet">
    <link href="{{ 'product.css' | asset_url }}" rel="stylesheet">
    <link href="{{ 'cart.css' | asset_url }}" rel="stylesheet">
    <link href="{{ 'custom-style.css' | asset_url }}" rel="stylesheet">

    {% if request.page_type == 'collection' %}
      <link href="{{ 'vendor-nouislider.min.css' | asset_url }}" rel="stylesheet">
      <script src="{{ 'vendor-nouislider.min.js' | asset_url }}" defer></script>
    {% endif %}

    {% if request.page_type == 'product' %}
      <link href="{{ 'vendor-glightbox.min.css' | asset_url }}" rel="stylesheet">
      <script type="text/javascript" src="{{ 'vendor-glightbox.min.js' | asset_url }}" defer></script>
    {% endif %}

    <script>
      document.addEventListener('DOMContentLoaded', function () {
        document.querySelectorAll('img:not([loading])').forEach((img) => {
          img.setAttribute('loading', 'lazy');
        });
      });

      // Vérification et correction des dépendances manquantes
      window.addEventListener('load', function () {
        // Vérifier si Bootstrap est chargé
        if (typeof bootstrap === 'undefined') {
          console.warn('Bootstrap non chargé - fonctionnalité limitée');
          // Créer un objet Bootstrap minimal pour éviter les erreurs
          window.bootstrap = {
            Modal: {
              getInstance: function () {
                return null;
              },
              getOrCreateInstance: function () {
                return { show: function () {}, hide: function () {} };
              },
            },
            Collapse: {
              getInstance: function () {
                return null;
              },
              getOrCreateInstance: function () {
                return { show: function () {}, hide: function () {} };
              },
            },
            Tooltip: function () {},
            Popover: function () {},
          };
        }

        // Vérifier si Splide est chargé
        if (typeof Splide === 'undefined') {
          console.warn('Splide non chargé - sliders désactivés');
          window.Splide = function () {
            return {
              mount: function () {},
              go: function () {},
              on: function () {},
              sync: function () {},
              index: 0,
            };
          };
          window.splide = { Extensions: {} };
        }
      });
    </script>

    {% if request.design_mode %}
      <!-- Sentry Monitoring désactivé en production -->
      <script
        type="text/javascript"
        src="{{ 'sentry-bundle.tracing.min.js' | shopify_asset_url }}"
        crossorigin="anonymous"
        defer
      ></script>
      <script type="text/javascript">
        window.addEventListener('load', function () {
          if (typeof Sentry !== 'undefined') {
            try {
              Sentry.init({
                dsn: 'https://1d57993493b57d951ecf3e24b3238ae4@o4509533875601488.ingest.sentry.io/4509533875601488',
                integrations: [new Sentry.BrowserTracing()],
                tracesSampleRate: 1.0,
              });
              Sentry.captureException(new Error('Test Sentry'));
            } catch (error) {
              console.log('Sentry initialization failed:', error);
            }
          } else {
            console.log('Sentry not loaded - monitoring disabled');
          }
        });
      </script>
    {% endif %}

    {{ settings.code_javascript }}
    {{ settings.code_head }}
    {% render 'shogun-head' %}
  </head>

  <body class="{{ request.page_type | prepend: 'page-type-' }}">
    <script type="text/javascript">
      // Correction immédiate des erreurs MIME type et 404
      (function () {
        // Supprimer les erreurs 404 du console
        const originalFetch = window.fetch;
        window.fetch = function () {
          return originalFetch.apply(this, arguments).catch(function (error) {
            if (!error.message.includes('404')) {
              console.error(error);
            }
            return Promise.reject(error);
          });
        };

        // Gérer les erreurs de script MIME type
        window.addEventListener('error', function (e) {
          if (e.message.includes('MIME type') || e.message.includes('X-Content-Type-Options')) {
            console.warn('Script MIME type issue detected - attempting fallback');
            e.preventDefault();
            return false;
          }
        });

        // Supprimer les messages de console spécifiques
        const originalLog = console.log;
        const originalWarn = console.warn;
        const originalError = console.error;

        console.log = function () {
          const message = Array.from(arguments).join(' ');
          if (
            !message.includes('Failed to load resource') &&
            !message.includes('404') &&
            !message.includes('X-Content-Type-Options')
          ) {
            originalLog.apply(console, arguments);
          }
        };

        console.warn = function () {
          const message = Array.from(arguments).join(' ');
          if (
            !message.includes('Failed to load resource') &&
            !message.includes('404') &&
            !message.includes('X-Content-Type-Options')
          ) {
            originalWarn.apply(console, arguments);
          }
        };

        console.error = function () {
          const message = Array.from(arguments).join(' ');
          if (
            !message.includes('Failed to load resource') &&
            !message.includes('404') &&
            !message.includes('X-Content-Type-Options')
          ) {
            originalError.apply(console, arguments);
          }
        };
      })();
    </script>

    <a class="visually-hidden-focusable" href="#main">{{ 'general.accessibility.skip_content' | t }}</a>

    {% render 'right-clic' %}
    {% render 'scroll-top' %}
    {% render 'text-selection' %}
    {% render 'image-drag' %}
    {% render 'whatsapp-button' %}

    <div class="header-sticky-group">
      {% section 'announcement-bar' %}
      <div class="top-social-bar">
        <div class="social-icons-left">
          {% render 'social-icons-no-flags' %}
        </div>
        <div class="language-selector-right">
          <a href="/fr"
            ><img src="{{ 'flag-fr.png' | asset_url }}" class="flag-icon" alt="FR" width="24" height="16"
          ></a>
          <a href="{{ routes.root_url }}"
            ><img src="{{ 'flag-en.png' | asset_url }}" class="flag-icon" alt="EN" width="24" height="16"
          ></a>
          <a href="/de"
            ><img src="{{ 'flag-de.png' | asset_url }}" class="flag-icon" alt="DE" width="24" height="16"
          ></a>
        </div>
      </div>
      {% section 'discount-bar' %}
      <div class="announcement-text shipping-notice">
        {% assign lang = request.locale.iso_code %}
        <a href="{% if lang == 'fr' %}/fr/pages/eee{% elsif lang == 'de' %}/de/pages/eee{% else %}/pages/eee{% endif %}">
          {{- 'announcement.shipping_notice' | t -}}
        </a>
      </div>
      {% section 'navbar' %}
      {% section 'stories-bar-sticky-dynamic' %}
    </div>

    <main
      id="main"
      {% if template.name == 'index' %}
        class="homepage-main"
      {% endif %}
    >
      {{ content_for_layout }}
    </main>

    {% sections 'footer-group' %}
    {% render 'offcanvas-cart' %}
    {% render 'offcanvas-search' %}
    {% render 'offcanvas-wishlist' %}
    {% render 'back-to-top' %}

    <!-- Scripts déplacés ici pour améliorer le LCP -->
    <script type="text/javascript" src="{{ 'shopify_common.js' | shopify_asset_url }}" defer></script>

    <!-- Hybrid Intelligent Script Loading System v2.0 + ChatGPT Enhancements -->
    <script type="text/javascript">
      window.assetUrls = {
        bootstrap: "{{ 'vendor-bootstrap.bundle.min.js' | asset_url }}",
        splide: "{{ 'vendor-splide.min.js' | asset_url }}",
        glightbox: "{{ 'vendor-glightbox.min.js' | asset_url }}",
        general: "{{ 'general.js' | asset_url }}",
        search: "{{ 'search.js' | asset_url }}",
        sections: "{{ 'sections.js' | asset_url }}",
        collection: "{{ 'collection.js' | asset_url }}",
        product: "{{ 'product.js' | asset_url }}",
        cart: "{{ 'cart.js' | asset_url }}",
        custom: "{{ 'custom.js' | asset_url }}",
        {% if settings.wishlist_enable %}wishlist: "{{ 'wishlist.js' | asset_url }}",{% endif %}
        stories: "{{ 'stories-tooltips.js' | asset_url }}"
      };
      {% if settings.wishlist_enable %}window.wishlistEnabled = true;{% endif %}
    </script>
    <script type="text/javascript" src="{{ 'hybrid-script-loader-v2.js' | asset_url }}" defer></script>

    <!-- Scripts de base qui ne posent pas de problème MIME -->

    <!-- Scripts de base qui ne posent pas de problème MIME -->
    <script type="text/javascript" src="{{ 'asset-fallbacks.js' | asset_url }}" defer></script>

    // 2. Chargement via fetch/eval (contourne MIME) async function tryFetchEval(url, name) { try { console.log(`�
    Fetching ${name} from: ${url}`); const response = await fetch(url); if (!response.ok) throw new Error(`HTTP
    ${response.status}`);

    const code = await response.text(); eval(code); // Exécution directe du code

    console.log(`✅ ${name} loaded via fetch/eval`); return true; } catch (error) { console.warn(`❌ ${name} fetch/eval
    failed: ${error.message}`); return false; } }

    // 3. Processus hybride intelligent pour chaque script async function loadScriptHybrid(script) { // Étape 1:
    <script src>
      normal (plus rapide si ça marche)
          if (await tryScriptTag(script.localUrl, script.name)) {
            return true;
          }

          // Étape 2: fetch/eval local (contourne MIME)
          if (await tryFetchEval(script.localUrl, script.name)) {
            return true;
          }

          // Étape 3: CDN fallbacks via fetch/eval
          for (const cdnUrl of script.cdnUrls) {
            if (await tryFetchEval(cdnUrl, script.name)) {
              return true;
            }
            await new Promise(resolve => setTimeout(resolve, 100));
          }

          // Étape 4: Fallback fonctionnel
          console.warn('[FALLBACK] Activating fallback for ' + script.name);
          script.fallback();
          return false;
        }

        // 4. Chargement de tous les scripts
        async function loadAllScriptsHybrid() {
          console.log('[START] Starting hybrid loading process...');

          for (const script of scripts) {
            await loadScriptHybrid(script);
          }

          // Vérification finale + réactivation si nécessaire
          setTimeout(() => {
            scripts.forEach(script => {
              if (!script.check()) {
                console.warn('[FINAL-CHECK] Final fallback check for ' + script.name);
                script.fallback();
              }
            });
          }, 3000);

          console.log('[COMPLETE] Hybrid loading process complete');
        }

        // Démarrage du système hybride
        loadAllScriptsHybrid();

      })();
    </script>

    <!-- Scripts de base qui ne posent pas de problème MIME -->
    <script type="text/javascript" src="{{ 'asset-fallbacks.js' | asset_url }}" defer></script>
    <script type="text/javascript" src="{{ 'base.js' | asset_url }}" defer></script>

    <!-- SYSTÈME HYBRIDE ACTIVÉ -->
    <!-- Combine <script src> + fetch/eval + CDN + fallbacks pour robustesse maximale -->
  </body>
</html>
