#!/usr/bin/env node

/**
 * Analytics Environment Injector
 * Charge les variables d'environnement et les injecte dans le th√®me Shopify
 */

const fs = require("fs");
const path = require("path");

// Charger dotenv si disponible
try {
  require("dotenv").config();
} catch (e) {
  console.warn(
    "dotenv non install√©, utilisation des variables d'environnement syst√®me"
  );
}

const CONFIG_MAPPING = {
  GTM_CONTAINER_ID: "gtm_id",
  GA4_MEASUREMENT_ID: "ga4_id",
  GOOGLE_SITE_VERIFICATION: "google_site_verification",
  AHREFS_SITE_VERIFICATION: "ahrefs_site_verification",
  FACEBOOK_PIXEL_ID: "facebook_pixel_id",
  TURNSTILE_SITE_KEY: "turnstile_site_key",
  TURNSTILE_ENABLED: "turnstile_enabled",
  TURNSTILE_THEME: "turnstile_theme",
  TURNSTILE_SIZE: "turnstile_size",
};

/**
 * Injecte les variables d'environnement dans les snippets Liquid
 */
function injectEnvVariables() {
  console.log("üîß Injection des variables d'environnement dans le th√®me...");

  // Cr√©er le snippet de configuration
  const configSnippet = generateConfigSnippet();

  const configPath = path.join(
    __dirname,
    "snippets",
    "analytics-config.liquid"
  );
  fs.writeFileSync(configPath, configSnippet, "utf8");
  console.log("‚úÖ Cr√©√©:", configPath);

  // Mettre √† jour le layout principal
  updateThemeLayout();

  console.log("‚úÖ Variables d'environnement inject√©es avec succ√®s !");
}

/**
 * G√©n√®re le snippet de configuration Liquid
 */
function generateConfigSnippet() {
  const envValues = {};

  // Extraire les valeurs des variables d'environnement
  Object.keys(CONFIG_MAPPING).forEach((envKey) => {
    const envValue = process.env[envKey];
    if (envValue) {
      const liquidKey = CONFIG_MAPPING[envKey];
      envValues[liquidKey] = envValue;
    }
  });

  let snippet = `{% comment %}
  Analytics Configuration from Environment Variables
  Auto-generated by analytics-env-injector.js
{% endcomment %}

<script>
  // Configuration des analytics depuis les variables d'environnement
  window.analyticsEnvConfig = {
`;

  Object.entries(envValues).forEach(([key, value]) => {
    const jsValue =
      typeof value === "string" ? `'${value.replace(/'/g, "\\'")}'` : value;
    snippet += `    ${key}: ${jsValue},\n`;
  });

  snippet += `  };

  // Fusionner avec les settings Shopify
  window.shopifyThemeSettings = Object.assign(
    window.analyticsEnvConfig || {},
    window.shopifyThemeSettings || {},
    {
      // Les settings Shopify ont la priorit√© sur les variables d'environnement
{% for setting in settings %}
      {{ setting.key | json }}: {{ setting.value | json }},
{% endfor %}
    }
  );
</script>`;

  return snippet;
}

/**
 * Met √† jour le layout principal pour inclure la configuration
 */
function updateThemeLayout() {
  const themeLayoutPath = path.join(__dirname, "layout", "theme.liquid");

  if (!fs.existsSync(themeLayoutPath)) {
    console.warn("‚ö†Ô∏è  Fichier theme.liquid introuvable:", themeLayoutPath);
    return;
  }

  let content = fs.readFileSync(themeLayoutPath, "utf8");

  // Chercher si la configuration est d√©j√† incluse
  if (content.includes("analytics-config")) {
    console.log("‚úÖ Configuration d√©j√† incluse dans theme.liquid");
    return;
  }

  // Ins√©rer la configuration apr√®s les meta tags
  const insertAfter = "{% render 'analytics-tracking' %}";
  const insertContent = `
    {%- comment -%} Analytics Environment Configuration {%- endcomment -%}
    {% render 'analytics-config' %}`;

  if (content.includes(insertAfter)) {
    content = content.replace(insertAfter, insertAfter + insertContent);
    fs.writeFileSync(themeLayoutPath, content, "utf8");
    console.log("‚úÖ Configuration ajout√©e √† theme.liquid");
  } else {
    console.warn("‚ö†Ô∏è  Point d'insertion non trouv√© dans theme.liquid");
  }
}

/**
 * Valide les variables d'environnement
 */
function validateEnvironment() {
  const errors = [];
  const warnings = [];

  const gtmId = process.env.GTM_CONTAINER_ID;
  const ga4Id = process.env.GA4_MEASUREMENT_ID;
  const facebookId = process.env.FACEBOOK_PIXEL_ID;

  // V√©rifications de format
  if (gtmId && !gtmId.match(/^GTM-[A-Z0-9]+$/)) {
    errors.push("GTM_CONTAINER_ID format invalide (doit √™tre GTM-XXXXXXX)");
  }

  if (ga4Id && !ga4Id.match(/^G-[A-Z0-9]+$/)) {
    errors.push("GA4_MEASUREMENT_ID format invalide (doit √™tre G-XXXXXXXXXX)");
  }

  if (facebookId && !facebookId.match(/^\d{15,16}$/)) {
    errors.push(
      "FACEBOOK_PIXEL_ID format invalide (doit √™tre un nombre de 15-16 chiffres)"
    );
  }

  // Avertissements
  if (!gtmId && !ga4Id) {
    warnings.push(
      "Aucun service d'analytics configur√© (GTM_CONTAINER_ID ou GA4_MEASUREMENT_ID)"
    );
  }

  if (errors.length > 0) {
    console.error("‚ùå Erreurs de validation:");
    errors.forEach((error) => console.error("  -", error));
    process.exit(1);
  }

  if (warnings.length > 0) {
    console.warn("‚ö†Ô∏è  Avertissements:");
    warnings.forEach((warning) => console.warn("  -", warning));
  }

  console.log("‚úÖ Validation des variables d'environnement r√©ussie");
}

/**
 * Affiche l'aide
 */
function showHelp() {
  console.log(`
Analytics Environment Injector

Usage:
  node analytics-env-injector.js [command]

Commands:
  inject     Injecte les variables d'environnement dans le th√®me (d√©faut)
  validate   Valide les variables d'environnement
  help       Affiche cette aide

Variables d'environnement support√©es:
  GTM_CONTAINER_ID        ID du conteneur Google Tag Manager
  GA4_MEASUREMENT_ID      ID de mesure Google Analytics 4
  GOOGLE_SITE_VERIFICATION Code de v√©rification Google Search Console
  AHREFS_SITE_VERIFICATION Code de v√©rification Ahrefs
  FACEBOOK_PIXEL_ID       ID du pixel Facebook/Meta
  TURNSTILE_SITE_KEY      Cl√© publique Cloudflare Turnstile
  TURNSTILE_ENABLED       Activer Turnstile (true/false)
  TURNSTILE_THEME         Th√®me Turnstile (auto/light/dark)
  TURNSTILE_SIZE          Taille Turnstile (normal/compact)

Exemple d'utilisation:
  # Cr√©er un fichier .env avec vos valeurs
  cp .env.example .env

  # √âditer .env avec vos vraies valeurs
  nano .env

  # Injecter dans le th√®me
  node analytics-env-injector.js inject
`);
}

// CLI
const command = process.argv[2] || "inject";

switch (command) {
  case "inject":
    validateEnvironment();
    injectEnvVariables();
    break;

  case "validate":
    validateEnvironment();
    break;

  case "help":
  case "--help":
  case "-h":
    showHelp();
    break;

  default:
    console.error("Commande inconnue:", command);
    showHelp();
    process.exit(1);
}
